export const getUpdatedAt = (videoData) => {
  if (!videoData || videoData.length === 0) return null;
  const updatedAt = videoData[0].timestamp;
  return updatedAt;
};

export const processVideos = (videoData) => {
  const sortedVideoData = videoData.sort((a, b) => {
    return b.hourlyViewCount - a.hourlyViewCount;
  });

  return sortedVideoData;
};

export const getHourlyTrendingVideo = (videoData) => {
  if (!videoData || videoData.length === 0) return null;
  const hourlyTrendingVideo = videoData.reduce((prev, current) => {
    return prev.hourlyViewCount > current.hourlyViewCount ? prev : current;
  });
  return hourlyTrendingVideo.id;
};

export const getDailyTrendingVideo = (videoData) => {
  if (!videoData || videoData.length === 0) return null;
  const dailyTrendingVideo = videoData.reduce((prev, current) => {
    return prev.dayViewCount > current.dayViewCount ? prev : current;
  });
  return dailyTrendingVideo.id;
};

export const formatCount = (count) => {
  if (count >= 1000000) return (count / 1000000).toFixed(1) + 'M';
  if (count >= 1000) return (count / 1000).toFixed(1) + 'K';
  return count;
};

export const checkMilestone = (count) => {
  if (count >= 100000000) return Math.floor(count / 100000000) * 100 + 'M+';
  if (count >= 1000000000) return Math.floor(count / 1000000000) * 100 + 'B+';
  return null;
};

export const getBadgeClass = (count) => {
  if (count >= 1000000000) return 'badge-1B';
  if (count >= 900000000) return 'badge-900M';
  if (count >= 800000000) return 'badge-800M';
  if (count >= 700000000) return 'badge-700M';
  if (count >= 600000000) return 'badge-600M';
  if (count >= 500000000) return 'badge-500M';
  if (count >= 400000000) return 'badge-400M';
  if (count >= 300000000) return 'badge-300M';
  if (count >= 200000000) return 'badge-200M';
  if (count >= 100000000) return 'badge-100M';
  return null;
};

export const getBadges = (viewCount, videoId, hourlyTrendingVideoId) => {
  const milestone = checkMilestone(viewCount);
  const badges = [];

  if (milestone) {
    badges.push({ label: milestone, variant: getBadgeClass(viewCount) });
  }

  if (videoId === hourlyTrendingVideoId) {
    badges.push({ label: 'Trending', variant: 'badge-hourly-gainer' });
  }

  return badges;
};

export const getSortedVideos = (videos, filterOption) => {
  const sorted = [...videos];
  if (filterOption === 'Hourly') {
    sorted.sort((a, b) => b.hourlyViewCount - a.hourlyViewCount);
  } else if (filterOption === '24H') {
    sorted.sort((a, b) => b.dayViewCount - a.dayViewCount);
  } else {
    sorted.sort((a, b) => b.viewCount - a.viewCount);
  }
  return sorted;
};

export const filterVideosByDisplayMode = (videos, displayMode) => {
  switch (displayMode) {
    case 'Perf':
      return videos.filter((video) =>
        video.title.toLowerCase().includes('performance')
      );
    case 'MV':
      return videos.filter(
        (video) =>
          (video.title.toLowerCase().includes('mv') ||
            video.title.toLowerCase().includes('music video')) &&
          !video.title.toLowerCase().includes('performance')
      );
    case 'Teaser':
      return videos.filter(
        (video) =>
          video.title.toLowerCase().includes('teaser') &&
          !video.title.toLowerCase().includes('performance')
      );
    case 'Audio':
      return videos.filter((video) =>
        video.description.toLowerCase().includes('auto-generated by youtube')
      );
    case 'Other':
      return videos.filter(
        (video) =>
          !video.title.toLowerCase().includes('performance') &&
          !video.title.toLowerCase().includes('mv') &&
          !video.title.toLowerCase().includes('music video') &&
          !video.description.toLowerCase().includes('auto-generated by youtube')
      );
    default:
      return videos;
  }
};
