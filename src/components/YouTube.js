import React, { useState } from 'react';
import VideoCard from './VideoCard';
import { useYouTubeStats } from '../hooks/useYouTubeStats';
import { formatDate } from '../utils/valueFormatter';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faFilter, faSort } from '@fortawesome/free-solid-svg-icons';
import Spinner from './Spinner';

const YouTube = () => {
  const { isLoading, videos, updatedAt, displayMode, setDisplayMode } =
    useYouTubeStats();

  const [filterOption, setFilterOption] = useState('Hourly');

  // filter videos by hourly, 24H, or total views
  const sortedVideos = () => {
    const sorted = [...videos];
    if (filterOption === 'Hourly') {
      sorted.sort((a, b) => b.hourlyViewCount - a.hourlyViewCount);
    } else if (filterOption === '24H') {
      sorted.sort((a, b) => b.dayViewCount - a.dayViewCount);
    } else {
      sorted.sort((a, b) => b.viewCount - a.viewCount);
    }
    return sorted;
  };

  const getVideosByDisplayMode = () => {
    const sorted = sortedVideos();
    switch (displayMode) {
      case 'Perf':
        return sorted.filter((video) =>
          video.title.toLowerCase().includes('performance')
        );
      case 'MV':
        return sorted.filter(
          (video) =>
            (video.title.toLowerCase().includes('mv') ||
              video.title.toLowerCase().includes('music video')) &&
            !video.title.toLowerCase().includes('performance')
        );
      case 'Audio':
        return sorted.filter((video) =>
          video.description.toLowerCase().includes('auto-generated by youtube')
        );
      case 'Other':
        return sorted.filter(
          (video) =>
            !video.title.toLowerCase().includes('performance') &&
            !video.title.toLowerCase().includes('mv') &&
            !video.title.toLowerCase().includes('music video') &&
            !video.description
              .toLowerCase()
              .includes('auto-generated by youtube')
        );
      default:
        return sorted;
    }
  };

  if (isLoading) return <Spinner />;
  return (
    <div className='container mt-2 mb-2'>
      <h1 className='text-center fs-4'>Updated: {formatDate(updatedAt)}</h1>
      <div className='row mb-2 mx-2'>
        <div className='col d-flex justify-content-start p-0 mb-2'>
          <div className='dropdown'>
            <button
              className='btn btn-outline-green-moon dropdown-toggle'
              type='button'
              id='displayModeMenuButton'
              data-bs-toggle='dropdown'
              aria-expanded='false'
            >
              <FontAwesomeIcon icon={faFilter} /> Filter by: {displayMode}
            </button>
            <ul
              className='dropdown-menu'
              aria-labelledby='displayModeMenuButton'
              style={{ minWidth: '100%' }}
            >
              <li>
                <button
                  className='dropdown-item'
                  onClick={() => setDisplayMode('All')}
                >
                  All
                </button>
              </li>
              <li>
                <button
                  className='dropdown-item'
                  onClick={() => setDisplayMode('Perf')}
                >
                  Performance
                </button>
              </li>
              <li>
                <button
                  className='dropdown-item'
                  onClick={() => setDisplayMode('MV')}
                >
                  Music Videos
                </button>
              </li>
              <li>
                <button
                  className='dropdown-item'
                  onClick={() => setDisplayMode('Audio')}
                >
                  Audio
                </button>
              </li>
              <li>
                <button
                  className='dropdown-item'
                  onClick={() => setDisplayMode('Other')}
                >
                  Other
                </button>
              </li>
            </ul>
          </div>
        </div>
        <div className='col d-flex justify-content-end p-0'>
          <div className='dropdown'>
            <button
              className='btn btn-outline-green-moon dropdown-toggle'
              type='button'
              id='filterMenuButton'
              data-bs-toggle='dropdown'
              aria-expanded='false'
            >
              <FontAwesomeIcon icon={faSort} /> Sort by: {filterOption}
            </button>
            <ul
              className='dropdown-menu'
              aria-labelledby='filterMenuButton'
              style={{ minWidth: '100%' }}
            >
              <li>
                <button
                  className='dropdown-item'
                  onClick={() => setFilterOption('Hourly')}
                >
                  Hourly Views
                </button>
              </li>
              <li>
                <button
                  className='dropdown-item'
                  onClick={() => setFilterOption('24H')}
                >
                  24H Views
                </button>
              </li>
              <li>
                <button
                  className='dropdown-item'
                  onClick={() => setFilterOption('Total')}
                >
                  Total Views
                </button>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div className='row row-cols-1 row-cols-md-2 g-4 youtube'>
        {getVideosByDisplayMode().map((video, index) => {
          return (
            <div className='col' key={index}>
              <VideoCard video={video} />
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default YouTube;
